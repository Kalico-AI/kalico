/* tslint:disable */
/* eslint-disable */
/**
 * Kalico API
 * REST API for Kalico backend services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ChannelPageableResponse
 */
export interface ChannelPageableResponse {
    /**
     * 
     * @type {number}
     * @memberof ChannelPageableResponse
     */
    count: number;
    /**
     * 
     * @type {Array<YouTubeChannelDetail>}
     * @memberof ChannelPageableResponse
     */
    records: Array<YouTubeChannelDetail>;
}
/**
 * 
 * @export
 * @interface ContentItem
 */
export interface ContentItem {
    /**
     * 
     * @type {string}
     * @memberof ContentItem
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentItem
     */
    url?: string;
    /**
     * 
     * @type {boolean}
     * @memberof ContentItem
     */
    checked?: boolean;
    /**
     * 
     * @type {Array<ContentItemChildren>}
     * @memberof ContentItem
     */
    children?: Array<ContentItemChildren>;
}
/**
 * 
 * @export
 * @interface ContentItemChildren
 */
export interface ContentItemChildren {
    /**
     * 
     * @type {string}
     * @memberof ContentItemChildren
     */
    text?: string;
}
/**
 * 
 * @export
 * @interface ContentPreviewResponse
 */
export interface ContentPreviewResponse {
    /**
     * 
     * @type {string}
     * @memberof ContentPreviewResponse
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentPreviewResponse
     */
    duration?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentPreviewResponse
     */
    thumbnail?: string;
}
/**
 * 
 * @export
 * @interface CreateEmailCampaignRequest
 */
export interface CreateEmailCampaignRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateEmailCampaignRequest
     */
    subject?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateEmailCampaignRequest
     */
    num_emails_sent?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateEmailCampaignRequest
     */
    template?: string;
    /**
     * 
     * @type {boolean}
     * @memberof CreateEmailCampaignRequest
     */
    personalized_by_name?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateEmailCampaignRequest
     */
    personalized_by_other?: boolean;
}
/**
 * 
 * @export
 * @interface CreateProjectRequest
 */
export interface CreateProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    project_name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    content_link?: string | null;
    /**
     * 
     * @type {KalicoContentType}
     * @memberof CreateProjectRequest
     */
    content_type?: KalicoContentType | null;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProjectRequest
     */
    paraphrase?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProjectRequest
     */
    get_raw_transcript?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProjectRequest
     */
    embed_images?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    file?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    file_extension?: string | null;
}
/**
 * 
 * @export
 * @interface CreateProjectResponse
 */
export interface CreateProjectResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectResponse
     */
    project_id?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectResponse
     */
    project_name?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectResponse
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface CreateRecipeResponse
 */
export interface CreateRecipeResponse {
    /**
     * 
     * @type {string}
     * @memberof CreateRecipeResponse
     */
    slug?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRecipeResponse
     */
    error?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateRecipeResponse
     */
    status?: string;
}
/**
 * 
 * @export
 * @interface EmailCampaign
 */
export interface EmailCampaign {
    /**
     * 
     * @type {string}
     * @memberof EmailCampaign
     */
    campaign_id?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailCampaign
     */
    subject?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailCampaign
     */
    template?: string;
    /**
     * 
     * @type {number}
     * @memberof EmailCampaign
     */
    num_emails_sent?: number;
    /**
     * 
     * @type {number}
     * @memberof EmailCampaign
     */
    open_rate?: number;
    /**
     * 
     * @type {number}
     * @memberof EmailCampaign
     */
    date_created?: number;
    /**
     * 
     * @type {boolean}
     * @memberof EmailCampaign
     */
    personalized_by_name?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EmailCampaign
     */
    personalized_by_other?: boolean;
    /**
     * 
     * @type {Array<EmailMetric>}
     * @memberof EmailCampaign
     */
    email_metric?: Array<EmailMetric>;
}
/**
 * 
 * @export
 * @interface EmailCampaignMetrics
 */
export interface EmailCampaignMetrics {
    /**
     * 
     * @type {Array<EmailCampaign>}
     * @memberof EmailCampaignMetrics
     */
    campaigns?: Array<EmailCampaign>;
}
/**
 * 
 * @export
 * @interface EmailMetric
 */
export interface EmailMetric {
    /**
     * 
     * @type {string}
     * @memberof EmailMetric
     */
    email?: string;
    /**
     * 
     * @type {number}
     * @memberof EmailMetric
     */
    num_opened?: number;
    /**
     * 
     * @type {number}
     * @memberof EmailMetric
     */
    last_opened_at?: number;
}
/**
 * 
 * @export
 * @interface GenericResponse
 */
export interface GenericResponse {
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    status?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    error?: string | null;
}
/**
 * 
 * @export
 * @interface GifRequest
 */
export interface GifRequest {
    /**
     * 
     * @type {number}
     * @memberof GifRequest
     */
    start?: number;
    /**
     * 
     * @type {number}
     * @memberof GifRequest
     */
    end?: number;
    /**
     * 
     * @type {string}
     * @memberof GifRequest
     */
    project_id?: string;
}
/**
 * 
 * @export
 * @interface GifResponse
 */
export interface GifResponse {
    /**
     * 
     * @type {string}
     * @memberof GifResponse
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof GifResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof GifResponse
     */
    error?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum JobStatus {
    InProgress = 'IN_PROGRESS',
    Complete = 'COMPLETE',
    Failed = 'FAILED',
    ProjectNotFound = 'PROJECT_NOT_FOUND'
}

/**
 * 
 * @export
 * @enum {string}
 */
export enum KalicoContentType {
    Diy = 'DIY',
    FoodRecipe = 'FOOD_RECIPE',
    Interview = 'INTERVIEW',
    Lecture = 'LECTURE',
    Podcast = 'PODCAST',
    Other = 'OTHER'
}

/**
 * 
 * @export
 * @interface MediaContent
 */
export interface MediaContent {
    /**
     * 
     * @type {string}
     * @memberof MediaContent
     */
    media_id: string;
    /**
     * 
     * @type {string}
     * @memberof MediaContent
     */
    project_id: string;
    /**
     * 
     * @type {string}
     * @memberof MediaContent
     */
    permalink: string;
    /**
     * 
     * @type {string}
     * @memberof MediaContent
     */
    transcript: string;
    /**
     * 
     * @type {string}
     * @memberof MediaContent
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof MediaContent
     */
    title: string;
}
/**
 * 
 * @export
 * @interface PageableRecipeResponse
 */
export interface PageableRecipeResponse {
    /**
     * 
     * @type {number}
     * @memberof PageableRecipeResponse
     */
    total_records: number;
    /**
     * 
     * @type {number}
     * @memberof PageableRecipeResponse
     */
    num_pages: number;
    /**
     * 
     * @type {Array<RecipeLite>}
     * @memberof PageableRecipeResponse
     */
    records: Array<RecipeLite>;
}
/**
 * 
 * @export
 * @interface PageableResponse
 */
export interface PageableResponse {
    /**
     * 
     * @type {number}
     * @memberof PageableResponse
     */
    total_records: number;
    /**
     * 
     * @type {number}
     * @memberof PageableResponse
     */
    num_pages: number;
    /**
     * 
     * @type {Array<Project>}
     * @memberof PageableResponse
     */
    records: Array<Project>;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    project_name?: string;
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    project_uid?: string;
}
/**
 * 
 * @export
 * @interface ProjectDetail
 */
export interface ProjectDetail {
    /**
     * 
     * @type {string}
     * @memberof ProjectDetail
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectDetail
     */
    name?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof ProjectDetail
     */
    raw_transcript?: boolean;
    /**
     * 
     * @type {number}
     * @memberof ProjectDetail
     */
    date_created?: number;
    /**
     * 
     * @type {Array<ContentItem>}
     * @memberof ProjectDetail
     */
    content?: Array<ContentItem>;
}
/**
 * 
 * @export
 * @interface ProjectJobStatus
 */
export interface ProjectJobStatus {
    /**
     * 
     * @type {string}
     * @memberof ProjectJobStatus
     */
    project_name?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectJobStatus
     */
    project_id?: string;
    /**
     * 
     * @type {JobStatus}
     * @memberof ProjectJobStatus
     */
    status?: JobStatus | null;
    /**
     * 
     * @type {string}
     * @memberof ProjectJobStatus
     */
    message?: string;
    /**
     * 
     * @type {number}
     * @memberof ProjectJobStatus
     */
    percent_complete?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectJobStatus
     */
    estimated_time?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectJobStatus
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface RecipeFull
 */
export interface RecipeFull {
    /**
     * 
     * @type {Array<string>}
     * @memberof RecipeFull
     */
    ingredients?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof RecipeFull
     */
    instructions?: Array<string>;
    /**
     * 
     * @type {RecipeLite}
     * @memberof RecipeFull
     */
    recipe_lite?: RecipeLite;
}
/**
 * 
 * @export
 * @interface RecipeLite
 */
export interface RecipeLite {
    /**
     * 
     * @type {string}
     * @memberof RecipeLite
     */
    slug?: string;
    /**
     * 
     * @type {number}
     * @memberof RecipeLite
     */
    created_at?: number;
    /**
     * 
     * @type {string}
     * @memberof RecipeLite
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipeLite
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof RecipeLite
     */
    thumbnail?: string;
    /**
     * 
     * @type {number}
     * @memberof RecipeLite
     */
    num_ingredients?: number;
    /**
     * 
     * @type {number}
     * @memberof RecipeLite
     */
    num_steps?: number;
    /**
     * 
     * @type {number}
     * @memberof RecipeLite
     */
    cooking_time?: number;
}
/**
 * 
 * @export
 * @interface StringDto
 */
export interface StringDto {
    /**
     * 
     * @type {string}
     * @memberof StringDto
     */
    value?: string;
}
/**
 * 
 * @export
 * @interface UpdateProjectContentRequest
 */
export interface UpdateProjectContentRequest {
    /**
     * 
     * @type {string}
     * @memberof UpdateProjectContentRequest
     */
    project_uid?: string;
    /**
     * 
     * @type {Array<ContentItem>}
     * @memberof UpdateProjectContentRequest
     */
    content?: Array<ContentItem>;
}
/**
 * 
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    firebase_id: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    picture: string;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof UserProfile
     */
    roles: { [key: string]: boolean; };
    /**
     * 
     * @type {boolean}
     * @memberof UserProfile
     */
    is_authorized: boolean;
}
/**
 * 
 * @export
 * @interface UserProfileResponse
 */
export interface UserProfileResponse {
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponse
     */
    error: string;
    /**
     * 
     * @type {UserProfile}
     * @memberof UserProfileResponse
     */
    profile: UserProfile;
}
/**
 * 
 * @export
 * @interface UserProject
 */
export interface UserProject {
    /**
     * 
     * @type {string}
     * @memberof UserProject
     */
    project_name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProject
     */
    project_id?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProject
     */
    content_url?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProject
     */
    user_full_name?: string;
    /**
     * 
     * @type {string}
     * @memberof UserProject
     */
    email?: string;
    /**
     * 
     * @type {number}
     * @memberof UserProject
     */
    registered_on?: number;
    /**
     * 
     * @type {number}
     * @memberof UserProject
     */
    project_created_at?: number;
}
/**
 * 
 * @export
 * @interface UserProjectsResponse
 */
export interface UserProjectsResponse {
    /**
     * 
     * @type {number}
     * @memberof UserProjectsResponse
     */
    num_users: number;
    /**
     * 
     * @type {number}
     * @memberof UserProjectsResponse
     */
    total_records: number;
    /**
     * 
     * @type {number}
     * @memberof UserProjectsResponse
     */
    num_pages: number;
    /**
     * 
     * @type {Array<UserProject>}
     * @memberof UserProjectsResponse
     */
    records: Array<UserProject>;
}
/**
 * 
 * @export
 * @interface VideoMetadata
 */
export interface VideoMetadata {
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    cdn_url: string;
    /**
     * 
     * @type {number}
     * @memberof VideoMetadata
     */
    like_count: number;
    /**
     * 
     * @type {number}
     * @memberof VideoMetadata
     */
    share_count: number;
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    caption: string | null;
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    creator_avatar: string | null;
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    creator_handle: string | null;
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    original_source: string;
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    cover_image: string | null;
}
/**
 * 
 * @export
 * @interface YouTubeChannelDetail
 */
export interface YouTubeChannelDetail {
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    query?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    first_name?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    last_name?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    facebook?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    keywords?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    channel_url?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    channel_name?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    channel_handle?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    subscribers?: string;
    /**
     * 
     * @type {number}
     * @memberof YouTubeChannelDetail
     */
    subscribers_value?: number;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    instagram?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    twitter?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    website?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    blog?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    snap_chat?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    discord?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    tiktok?: string;
    /**
     * 
     * @type {string}
     * @memberof YouTubeChannelDetail
     */
    pinterest?: string;
}

/**
 * LeadApi - axios parameter creator
 * @export
 */
export const LeadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create an email campaign
         * @summary Create an email campaign
         * @param {CreateEmailCampaignRequest} createEmailCampaignRequest Create campaign request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailCampaign: async (createEmailCampaignRequest: CreateEmailCampaignRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createEmailCampaignRequest' is not null or undefined
            assertParamExists('createEmailCampaign', 'createEmailCampaignRequest', createEmailCampaignRequest)
            const localVarPath = `/campaigns/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createEmailCampaignRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get YouTube channel info
         * @param {string} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelInfo: async (query: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getChannelInfo', 'query', query)
            const localVarPath = `/lead/youtube/channels`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (query !== undefined) {
                localVarQueryParameter['query'] = query;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get email campaign metrics
         * @summary Get email campaign metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignMetrics: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/campaigns/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user image
         * @summary Get user image
         * @param {string} imageHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserEmailImage: async (imageHash: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'imageHash' is not null or undefined
            assertParamExists('getUserEmailImage', 'imageHash', imageHash)
            const localVarPath = `/lead/image/{image_hash}`
                .replace(`{${"image_hash"}}`, encodeURIComponent(String(imageHash)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeadApi - functional programming interface
 * @export
 */
export const LeadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeadApiAxiosParamCreator(configuration)
    return {
        /**
         * Create an email campaign
         * @summary Create an email campaign
         * @param {CreateEmailCampaignRequest} createEmailCampaignRequest Create campaign request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createEmailCampaign(createEmailCampaignRequest: CreateEmailCampaignRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createEmailCampaign(createEmailCampaignRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get YouTube channel info
         * @param {string} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getChannelInfo(query: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChannelPageableResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getChannelInfo(query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get email campaign metrics
         * @summary Get email campaign metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEmailCampaignMetrics(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EmailCampaignMetrics>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEmailCampaignMetrics(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get user image
         * @summary Get user image
         * @param {string} imageHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserEmailImage(imageHash: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserEmailImage(imageHash, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeadApi - factory interface
 * @export
 */
export const LeadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeadApiFp(configuration)
    return {
        /**
         * Create an email campaign
         * @summary Create an email campaign
         * @param {CreateEmailCampaignRequest} createEmailCampaignRequest Create campaign request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEmailCampaign(createEmailCampaignRequest: CreateEmailCampaignRequest, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.createEmailCampaign(createEmailCampaignRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get YouTube channel info
         * @param {string} query 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getChannelInfo(query: string, options?: any): AxiosPromise<ChannelPageableResponse> {
            return localVarFp.getChannelInfo(query, options).then((request) => request(axios, basePath));
        },
        /**
         * Get email campaign metrics
         * @summary Get email campaign metrics
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEmailCampaignMetrics(options?: any): AxiosPromise<EmailCampaignMetrics> {
            return localVarFp.getEmailCampaignMetrics(options).then((request) => request(axios, basePath));
        },
        /**
         * Get user image
         * @summary Get user image
         * @param {string} imageHash 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserEmailImage(imageHash: string, options?: any): AxiosPromise<string> {
            return localVarFp.getUserEmailImage(imageHash, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * LeadApi - object-oriented interface
 * @export
 * @class LeadApi
 * @extends {BaseAPI}
 */
export class LeadApi extends BaseAPI {
    /**
     * Create an email campaign
     * @summary Create an email campaign
     * @param {CreateEmailCampaignRequest} createEmailCampaignRequest Create campaign request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadApi
     */
    public createEmailCampaign(createEmailCampaignRequest: CreateEmailCampaignRequest, options?: any) {
        return LeadApiFp(this.configuration).createEmailCampaign(createEmailCampaignRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get YouTube channel info
     * @param {string} query 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadApi
     */
    public getChannelInfo(query: string, options?: any) {
        return LeadApiFp(this.configuration).getChannelInfo(query, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get email campaign metrics
     * @summary Get email campaign metrics
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadApi
     */
    public getEmailCampaignMetrics(options?: any) {
        return LeadApiFp(this.configuration).getEmailCampaignMetrics(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user image
     * @summary Get user image
     * @param {string} imageHash 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadApi
     */
    public getUserEmailImage(imageHash: string, options?: any) {
        return LeadApiFp(this.configuration).getUserEmailImage(imageHash, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new project and start content processing
         * @summary Create a new project
         * @param {CreateProjectRequest} createProjectRequest Create project request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (createProjectRequest: CreateProjectRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectRequest' is not null or undefined
            assertParamExists('createProject', 'createProjectRequest', createProjectRequest)
            const localVarPath = `/project/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a project
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteProject', 'projectId', projectId)
            const localVarPath = `/project/delete/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of projects
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/project/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of user projects
         * @summary Get all user projects
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserProjects: async (page: number, limit: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getAllUserProjects', 'page', page)
            // verify required parameter 'limit' is not null or undefined
            assertParamExists('getAllUserProjects', 'limit', limit)
            const localVarPath = `/project/users/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get OpenGraph preview of a video or audio link
         * @summary Get OpenGraph preview of a video or audio link
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentPreview: async (url: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'url' is not null or undefined
            assertParamExists('getContentPreview', 'url', url)
            const localVarPath = `/project/content/preview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (url !== undefined) {
                localVarQueryParameter['url'] = url;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get full media content metadata
         * @summary Get full media content metadata
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaContent: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getMediaContent', 'projectId', projectId)
            const localVarPath = `/project/media-content/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a project by ID
         * @summary Get a project by ID
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectById', 'projectId', projectId)
            const localVarPath = `/project/detail/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the progress of a pending job
         * @summary Get the progress of a pending job
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectJobStatus: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectJobStatus', 'projectId', projectId)
            const localVarPath = `/project/job-status/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get video sampled images
         * @summary Get video sampled images
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampledImages: async (projectId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSampledImages', 'projectId', projectId)
            const localVarPath = `/project/sampled-images/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update content
         * @summary Update content
         * @param {UpdateProjectContentRequest} updateProjectContentRequest Update content request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectContent: async (updateProjectContentRequest: UpdateProjectContentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateProjectContentRequest' is not null or undefined
            assertParamExists('updateProjectContent', 'updateProjectContentRequest', updateProjectContentRequest)
            const localVarPath = `/project/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectContentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new project and start content processing
         * @summary Create a new project
         * @param {CreateProjectRequest} createProjectRequest Create project request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(createProjectRequest: CreateProjectRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(createProjectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a project
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProject(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of projects
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjects(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageableResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of user projects
         * @summary Get all user projects
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllUserProjects(page: number, limit: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProjectsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllUserProjects(page, limit, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get OpenGraph preview of a video or audio link
         * @summary Get OpenGraph preview of a video or audio link
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getContentPreview(url: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentPreviewResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getContentPreview(url, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get full media content metadata
         * @summary Get full media content metadata
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaContent(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaContent(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a project by ID
         * @summary Get a project by ID
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectById(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectById(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get the progress of a pending job
         * @summary Get the progress of a pending job
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectJobStatus(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectJobStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectJobStatus(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get video sampled images
         * @summary Get video sampled images
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSampledImages(projectId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSampledImages(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update content
         * @summary Update content
         * @param {UpdateProjectContentRequest} updateProjectContentRequest Update content request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectContent(updateProjectContentRequest: UpdateProjectContentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectContent(updateProjectContentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * Create a new project and start content processing
         * @summary Create a new project
         * @param {CreateProjectRequest} createProjectRequest Create project request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(createProjectRequest: CreateProjectRequest, options?: any): AxiosPromise<CreateProjectResponse> {
            return localVarFp.createProject(createProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a project
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(projectId: string, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.deleteProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of projects
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects(options?: any): AxiosPromise<PageableResponse> {
            return localVarFp.getAllProjects(options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of user projects
         * @summary Get all user projects
         * @param {number} page 
         * @param {number} limit 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllUserProjects(page: number, limit: number, options?: any): AxiosPromise<UserProjectsResponse> {
            return localVarFp.getAllUserProjects(page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Get OpenGraph preview of a video or audio link
         * @summary Get OpenGraph preview of a video or audio link
         * @param {string} url 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getContentPreview(url: string, options?: any): AxiosPromise<ContentPreviewResponse> {
            return localVarFp.getContentPreview(url, options).then((request) => request(axios, basePath));
        },
        /**
         * Get full media content metadata
         * @summary Get full media content metadata
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaContent(projectId: string, options?: any): AxiosPromise<MediaContent> {
            return localVarFp.getMediaContent(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a project by ID
         * @summary Get a project by ID
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById(projectId: string, options?: any): AxiosPromise<ProjectDetail> {
            return localVarFp.getProjectById(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the progress of a pending job
         * @summary Get the progress of a pending job
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectJobStatus(projectId: string, options?: any): AxiosPromise<ProjectJobStatus> {
            return localVarFp.getProjectJobStatus(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get video sampled images
         * @summary Get video sampled images
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampledImages(projectId: string, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getSampledImages(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update content
         * @summary Update content
         * @param {UpdateProjectContentRequest} updateProjectContentRequest Update content request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectContent(updateProjectContentRequest: UpdateProjectContentRequest, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.updateProjectContent(updateProjectContentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * Create a new project and start content processing
     * @summary Create a new project
     * @param {CreateProjectRequest} createProjectRequest Create project request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public createProject(createProjectRequest: CreateProjectRequest, options?: any) {
        return ProjectApiFp(this.configuration).createProject(createProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a project
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public deleteProject(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).deleteProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of projects
     * @summary Get all projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getAllProjects(options?: any) {
        return ProjectApiFp(this.configuration).getAllProjects(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of user projects
     * @summary Get all user projects
     * @param {number} page 
     * @param {number} limit 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getAllUserProjects(page: number, limit: number, options?: any) {
        return ProjectApiFp(this.configuration).getAllUserProjects(page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get OpenGraph preview of a video or audio link
     * @summary Get OpenGraph preview of a video or audio link
     * @param {string} url 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getContentPreview(url: string, options?: any) {
        return ProjectApiFp(this.configuration).getContentPreview(url, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get full media content metadata
     * @summary Get full media content metadata
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getMediaContent(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).getMediaContent(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a project by ID
     * @summary Get a project by ID
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectById(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).getProjectById(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get the progress of a pending job
     * @summary Get the progress of a pending job
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectJobStatus(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).getProjectJobStatus(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get video sampled images
     * @summary Get video sampled images
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getSampledImages(projectId: string, options?: any) {
        return ProjectApiFp(this.configuration).getSampledImages(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update content
     * @summary Update content
     * @param {UpdateProjectContentRequest} updateProjectContentRequest Update content request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public updateProjectContent(updateProjectContentRequest: UpdateProjectContentRequest, options?: any) {
        return ProjectApiFp(this.configuration).updateProjectContent(updateProjectContentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RecipeApi - axios parameter creator
 * @export
 */
export const RecipeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new recipe from a url
         * @summary Create a new recipe
         * @param {StringDto} stringDto Create recipe request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecipe: async (stringDto: StringDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'stringDto' is not null or undefined
            assertParamExists('createRecipe', 'stringDto', stringDto)
            const localVarPath = `/recipe/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(stringDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a paginated list of recipes
         * @summary Get all recipes
         * @param {number} page 
         * @param {number} size 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipes: async (page: number, size: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            assertParamExists('getAllRecipes', 'page', page)
            // verify required parameter 'size' is not null or undefined
            assertParamExists('getAllRecipes', 'size', size)
            const localVarPath = `/recipe/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get full recipe by slug
         * @summary Get full recipe
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullRecipe: async (slug: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'slug' is not null or undefined
            assertParamExists('getFullRecipe', 'slug', slug)
            const localVarPath = `/recipe/single/{slug}`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RecipeApi - functional programming interface
 * @export
 */
export const RecipeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RecipeApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new recipe from a url
         * @summary Create a new recipe
         * @param {StringDto} stringDto Create recipe request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRecipe(stringDto: StringDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateRecipeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createRecipe(stringDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a paginated list of recipes
         * @summary Get all recipes
         * @param {number} page 
         * @param {number} size 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllRecipes(page: number, size: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageableRecipeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllRecipes(page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get full recipe by slug
         * @summary Get full recipe
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFullRecipe(slug: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecipeFull>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getFullRecipe(slug, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RecipeApi - factory interface
 * @export
 */
export const RecipeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RecipeApiFp(configuration)
    return {
        /**
         * Create a new recipe from a url
         * @summary Create a new recipe
         * @param {StringDto} stringDto Create recipe request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRecipe(stringDto: StringDto, options?: any): AxiosPromise<CreateRecipeResponse> {
            return localVarFp.createRecipe(stringDto, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a paginated list of recipes
         * @summary Get all recipes
         * @param {number} page 
         * @param {number} size 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllRecipes(page: number, size: number, options?: any): AxiosPromise<PageableRecipeResponse> {
            return localVarFp.getAllRecipes(page, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Get full recipe by slug
         * @summary Get full recipe
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFullRecipe(slug: string, options?: any): AxiosPromise<RecipeFull> {
            return localVarFp.getFullRecipe(slug, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RecipeApi - object-oriented interface
 * @export
 * @class RecipeApi
 * @extends {BaseAPI}
 */
export class RecipeApi extends BaseAPI {
    /**
     * Create a new recipe from a url
     * @summary Create a new recipe
     * @param {StringDto} stringDto Create recipe request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipeApi
     */
    public createRecipe(stringDto: StringDto, options?: any) {
        return RecipeApiFp(this.configuration).createRecipe(stringDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a paginated list of recipes
     * @summary Get all recipes
     * @param {number} page 
     * @param {number} size 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipeApi
     */
    public getAllRecipes(page: number, size: number, options?: any) {
        return RecipeApiFp(this.configuration).getAllRecipes(page, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get full recipe by slug
     * @summary Get full recipe
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RecipeApi
     */
    public getFullRecipe(slug: string, options?: any) {
        return RecipeApiFp(this.configuration).getFullRecipe(slug, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserprofile(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserprofile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile(options?: any): AxiosPromise<UserProfileResponse> {
            return localVarFp.getUserprofile(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Get user profile or create one if it doesn\'t exist
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserprofile(options?: any) {
        return UserApiFp(this.configuration).getUserprofile(options).then((request) => request(this.axios, this.basePath));
    }
}


