/* tslint:disable */
/* eslint-disable */
/**
 * Kalico API
 * REST API for Kalico backend services
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface ContentItem
 */
export interface ContentItem {
    /**
     * 
     * @type {string}
     * @memberof ContentItem
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof ContentItem
     */
    url?: string;
    /**
     * 
     * @type {Array<ContentItemChildren>}
     * @memberof ContentItem
     */
    children?: Array<ContentItemChildren>;
}
/**
 * 
 * @export
 * @interface ContentItemChildren
 */
export interface ContentItemChildren {
    /**
     * 
     * @type {string}
     * @memberof ContentItemChildren
     */
    text?: string;
}
/**
 * 
 * @export
 * @interface CreateProjectRequest
 */
export interface CreateProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    project_name?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    content_link?: string | null;
    /**
     * 
     * @type {KalicoContentType}
     * @memberof CreateProjectRequest
     */
    content_type?: KalicoContentType | null;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProjectRequest
     */
    paraphrase?: boolean | null;
    /**
     * 
     * @type {boolean}
     * @memberof CreateProjectRequest
     */
    embed_images?: boolean | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    file?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectRequest
     */
    file_extension?: string | null;
}
/**
 * 
 * @export
 * @interface CreateProjectResponse
 */
export interface CreateProjectResponse {
    /**
     * 
     * @type {number}
     * @memberof CreateProjectResponse
     */
    project_id?: number;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectResponse
     */
    error?: string;
}
/**
 * 
 * @export
 * @interface GenericResponse
 */
export interface GenericResponse {
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    status?: string | null;
    /**
     * 
     * @type {string}
     * @memberof GenericResponse
     */
    error?: string | null;
}
/**
 * 
 * @export
 * @interface GifRequest
 */
export interface GifRequest {
    /**
     * 
     * @type {number}
     * @memberof GifRequest
     */
    start?: number;
    /**
     * 
     * @type {number}
     * @memberof GifRequest
     */
    end?: number;
    /**
     * 
     * @type {number}
     * @memberof GifRequest
     */
    project_id?: number;
}
/**
 * 
 * @export
 * @interface GifResponse
 */
export interface GifResponse {
    /**
     * 
     * @type {string}
     * @memberof GifResponse
     */
    url?: string;
    /**
     * 
     * @type {string}
     * @memberof GifResponse
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof GifResponse
     */
    error?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum KalicoContentType {
    Diy = 'DIY',
    FoodRecipe = 'FOOD_RECIPE',
    Interview = 'INTERVIEW',
    Lecture = 'LECTURE',
    Podcast = 'PODCAST',
    Other = 'OTHER'
}

/**
 * 
 * @export
 * @interface MediaContent
 */
export interface MediaContent {
    /**
     * 
     * @type {string}
     * @memberof MediaContent
     */
    media_id: string;
    /**
     * 
     * @type {number}
     * @memberof MediaContent
     */
    project_id: number;
    /**
     * 
     * @type {string}
     * @memberof MediaContent
     */
    permalink: string;
    /**
     * 
     * @type {string}
     * @memberof MediaContent
     */
    transcript: string;
    /**
     * 
     * @type {string}
     * @memberof MediaContent
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof MediaContent
     */
    title: string;
}
/**
 * 
 * @export
 * @interface PageableResponse
 */
export interface PageableResponse {
    /**
     * 
     * @type {number}
     * @memberof PageableResponse
     */
    total_records: number;
    /**
     * 
     * @type {number}
     * @memberof PageableResponse
     */
    num_pages: number;
    /**
     * 
     * @type {Array<Project>}
     * @memberof PageableResponse
     */
    records: Array<Project>;
}
/**
 * 
 * @export
 * @interface Project
 */
export interface Project {
    /**
     * 
     * @type {string}
     * @memberof Project
     */
    project_name?: string;
    /**
     * 
     * @type {number}
     * @memberof Project
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface ProjectDetail
 */
export interface ProjectDetail {
    /**
     * 
     * @type {number}
     * @memberof ProjectDetail
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof ProjectDetail
     */
    name?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProjectDetail
     */
    date_created?: number;
    /**
     * 
     * @type {Array<ContentItem>}
     * @memberof ProjectDetail
     */
    content?: Array<ContentItem>;
}
/**
 * 
 * @export
 * @interface UpdateProjectContentRequest
 */
export interface UpdateProjectContentRequest {
    /**
     * 
     * @type {number}
     * @memberof UpdateProjectContentRequest
     */
    id?: number;
    /**
     * 
     * @type {Array<ContentItem>}
     * @memberof UpdateProjectContentRequest
     */
    content?: Array<ContentItem>;
}
/**
 * 
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    firebase_id: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    picture: string;
    /**
     * 
     * @type {{ [key: string]: boolean; }}
     * @memberof UserProfile
     */
    roles: { [key: string]: boolean; };
    /**
     * 
     * @type {boolean}
     * @memberof UserProfile
     */
    is_authorized: boolean;
}
/**
 * 
 * @export
 * @interface UserProfileResponse
 */
export interface UserProfileResponse {
    /**
     * 
     * @type {string}
     * @memberof UserProfileResponse
     */
    error: string;
    /**
     * 
     * @type {UserProfile}
     * @memberof UserProfileResponse
     */
    profile: UserProfile;
}
/**
 * 
 * @export
 * @interface VideoMetadata
 */
export interface VideoMetadata {
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    cdn_url: string;
    /**
     * 
     * @type {number}
     * @memberof VideoMetadata
     */
    like_count: number;
    /**
     * 
     * @type {number}
     * @memberof VideoMetadata
     */
    share_count: number;
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    caption: string | null;
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    creator_avatar: string | null;
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    creator_handle: string | null;
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    original_source: string;
    /**
     * 
     * @type {string}
     * @memberof VideoMetadata
     */
    cover_image: string | null;
}

/**
 * ProjectApi - axios parameter creator
 * @export
 */
export const ProjectApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Create a new project and start content processing
         * @summary Create a new project
         * @param {CreateProjectRequest} createProjectRequest Create project request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject: async (createProjectRequest: CreateProjectRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectRequest' is not null or undefined
            assertParamExists('createProject', 'createProjectRequest', createProjectRequest)
            const localVarPath = `/project/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a project
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject: async (projectId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('deleteProject', 'projectId', projectId)
            const localVarPath = `/project/delete/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of projects
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/project/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get full media content metadata
         * @summary Get full media content metadata
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaContent: async (projectId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getMediaContent', 'projectId', projectId)
            const localVarPath = `/project/media-content/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a project by ID
         * @summary Get a project by ID
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById: async (projectId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getProjectById', 'projectId', projectId)
            const localVarPath = `/project/detail/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get video sampled images
         * @summary Get video sampled images
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampledImages: async (projectId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('getSampledImages', 'projectId', projectId)
            const localVarPath = `/project/sampled-images/{project_id}`
                .replace(`{${"project_id"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update content
         * @summary Update content
         * @param {UpdateProjectContentRequest} updateProjectContentRequest Update content request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectContent: async (updateProjectContentRequest: UpdateProjectContentRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'updateProjectContentRequest' is not null or undefined
            assertParamExists('updateProjectContent', 'updateProjectContentRequest', updateProjectContentRequest)
            const localVarPath = `/project/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateProjectContentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectApi - functional programming interface
 * @export
 */
export const ProjectApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectApiAxiosParamCreator(configuration)
    return {
        /**
         * Create a new project and start content processing
         * @summary Create a new project
         * @param {CreateProjectRequest} createProjectRequest Create project request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createProject(createProjectRequest: CreateProjectRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createProject(createProjectRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete a project
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProject(projectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProject(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a list of projects
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllProjects(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PageableResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllProjects(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get full media content metadata
         * @summary Get full media content metadata
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMediaContent(projectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MediaContent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMediaContent(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get a project by ID
         * @summary Get a project by ID
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProjectById(projectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectDetail>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProjectById(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get video sampled images
         * @summary Get video sampled images
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSampledImages(projectId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSampledImages(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update content
         * @summary Update content
         * @param {UpdateProjectContentRequest} updateProjectContentRequest Update content request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateProjectContent(updateProjectContentRequest: UpdateProjectContentRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GenericResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateProjectContent(updateProjectContentRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ProjectApi - factory interface
 * @export
 */
export const ProjectApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectApiFp(configuration)
    return {
        /**
         * Create a new project and start content processing
         * @summary Create a new project
         * @param {CreateProjectRequest} createProjectRequest Create project request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createProject(createProjectRequest: CreateProjectRequest, options?: any): AxiosPromise<CreateProjectResponse> {
            return localVarFp.createProject(createProjectRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a project
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProject(projectId: number, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.deleteProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a list of projects
         * @summary Get all projects
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllProjects(options?: any): AxiosPromise<PageableResponse> {
            return localVarFp.getAllProjects(options).then((request) => request(axios, basePath));
        },
        /**
         * Get full media content metadata
         * @summary Get full media content metadata
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMediaContent(projectId: number, options?: any): AxiosPromise<MediaContent> {
            return localVarFp.getMediaContent(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get a project by ID
         * @summary Get a project by ID
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProjectById(projectId: number, options?: any): AxiosPromise<ProjectDetail> {
            return localVarFp.getProjectById(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get video sampled images
         * @summary Get video sampled images
         * @param {number} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSampledImages(projectId: number, options?: any): AxiosPromise<Array<string>> {
            return localVarFp.getSampledImages(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * Update content
         * @summary Update content
         * @param {UpdateProjectContentRequest} updateProjectContentRequest Update content request
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateProjectContent(updateProjectContentRequest: UpdateProjectContentRequest, options?: any): AxiosPromise<GenericResponse> {
            return localVarFp.updateProjectContent(updateProjectContentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectApi - object-oriented interface
 * @export
 * @class ProjectApi
 * @extends {BaseAPI}
 */
export class ProjectApi extends BaseAPI {
    /**
     * Create a new project and start content processing
     * @summary Create a new project
     * @param {CreateProjectRequest} createProjectRequest Create project request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public createProject(createProjectRequest: CreateProjectRequest, options?: any) {
        return ProjectApiFp(this.configuration).createProject(createProjectRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a project
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public deleteProject(projectId: number, options?: any) {
        return ProjectApiFp(this.configuration).deleteProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a list of projects
     * @summary Get all projects
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getAllProjects(options?: any) {
        return ProjectApiFp(this.configuration).getAllProjects(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get full media content metadata
     * @summary Get full media content metadata
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getMediaContent(projectId: number, options?: any) {
        return ProjectApiFp(this.configuration).getMediaContent(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get a project by ID
     * @summary Get a project by ID
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getProjectById(projectId: number, options?: any) {
        return ProjectApiFp(this.configuration).getProjectById(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get video sampled images
     * @summary Get video sampled images
     * @param {number} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public getSampledImages(projectId: number, options?: any) {
        return ProjectApiFp(this.configuration).getSampledImages(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update content
     * @summary Update content
     * @param {UpdateProjectContentRequest} updateProjectContentRequest Update content request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectApi
     */
    public updateProjectContent(updateProjectContentRequest: UpdateProjectContentRequest, options?: any) {
        return ProjectApiFp(this.configuration).updateProjectContent(updateProjectContentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/user/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserApiAxiosParamCreator(configuration)
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserprofile(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserProfileResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserprofile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserApiFp(configuration)
    return {
        /**
         * Get user profile or create one if it doesn\'t exist
         * @summary Get user profile
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserprofile(options?: any): AxiosPromise<UserProfileResponse> {
            return localVarFp.getUserprofile(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     * Get user profile or create one if it doesn\'t exist
     * @summary Get user profile
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    public getUserprofile(options?: any) {
        return UserApiFp(this.configuration).getUserprofile(options).then((request) => request(this.axios, this.basePath));
    }
}


